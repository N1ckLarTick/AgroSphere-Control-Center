// Generated by view binder compiler. Do not edit!
package com.example.agrospherecontrolcenter.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.agrospherecontrolcenter.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityAddNewDeviceBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnSaveDevice;

  @NonNull
  public final EditText editTextName;

  @NonNull
  public final EditText editTextPin;

  @NonNull
  public final EditText editTextType;

  private ActivityAddNewDeviceBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button btnSaveDevice, @NonNull EditText editTextName, @NonNull EditText editTextPin,
      @NonNull EditText editTextType) {
    this.rootView = rootView;
    this.btnSaveDevice = btnSaveDevice;
    this.editTextName = editTextName;
    this.editTextPin = editTextPin;
    this.editTextType = editTextType;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityAddNewDeviceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityAddNewDeviceBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_add_new_device, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityAddNewDeviceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnSaveDevice;
      Button btnSaveDevice = ViewBindings.findChildViewById(rootView, id);
      if (btnSaveDevice == null) {
        break missingId;
      }

      id = R.id.editTextName;
      EditText editTextName = ViewBindings.findChildViewById(rootView, id);
      if (editTextName == null) {
        break missingId;
      }

      id = R.id.editTextPin;
      EditText editTextPin = ViewBindings.findChildViewById(rootView, id);
      if (editTextPin == null) {
        break missingId;
      }

      id = R.id.editTextType;
      EditText editTextType = ViewBindings.findChildViewById(rootView, id);
      if (editTextType == null) {
        break missingId;
      }

      return new ActivityAddNewDeviceBinding((ConstraintLayout) rootView, btnSaveDevice,
          editTextName, editTextPin, editTextType);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
